"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretsClient = exports.BitwardenClient = void 0;
const rust = __importStar(require("../../binding"));
const schemas_1 = require("./schemas");
class BitwardenClient {
    constructor(settings, loggingLevel) {
        const settingsJson = settings == null ? null : schemas_1.Convert.clientSettingsToJson(settings);
        this.client = new rust.BitwardenClient(settingsJson, loggingLevel !== null && loggingLevel !== void 0 ? loggingLevel : 2 /* LogLevel.Info */);
    }
    loginWithAccessToken(accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const commandInput = schemas_1.Convert.commandToJson({
                accessTokenLogin: {
                    accessToken: accessToken,
                },
            });
            const response = yield this.client.runCommand(commandInput);
            return schemas_1.Convert.toResponseForAPIKeyLoginResponse(response);
        });
    }
    /*
    async sync(excludeSubdomains = false): Promise<ResponseForSyncResponse> {
      const response = await this.client.runCommand(
        Convert.commandToJson({
          sync: {
            excludeSubdomains,
          },
        })
      );
  
      return Convert.toResponseForSyncResponse(response);
    }
    */
    secrets() {
        return new SecretsClient(this.client);
    }
}
exports.BitwardenClient = BitwardenClient;
class SecretsClient {
    constructor(client) {
        this.client = client;
    }
    get(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.runCommand(schemas_1.Convert.commandToJson({
                secrets: {
                    get: { id },
                },
            }));
            return schemas_1.Convert.toResponseForSecretResponse(response);
        });
    }
    getByIds(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.runCommand(schemas_1.Convert.commandToJson({
                secrets: {
                    getByIds: { ids },
                },
            }));
            return schemas_1.Convert.toResponseForSecretsResponse(response);
        });
    }
    create(key, note, organizationId, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.runCommand(schemas_1.Convert.commandToJson({
                secrets: {
                    create: { key, note, organizationId, value },
                },
            }));
            return schemas_1.Convert.toResponseForSecretResponse(response);
        });
    }
    list(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.runCommand(schemas_1.Convert.commandToJson({
                secrets: {
                    list: { organizationId },
                },
            }));
            return schemas_1.Convert.toResponseForSecretIdentifiersResponse(response);
        });
    }
    update(id, key, note, organizationId, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.runCommand(schemas_1.Convert.commandToJson({
                secrets: {
                    update: { id, key, note, organizationId, value },
                },
            }));
            return schemas_1.Convert.toResponseForSecretResponse(response);
        });
    }
    delete(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.runCommand(schemas_1.Convert.commandToJson({
                secrets: {
                    delete: { ids },
                },
            }));
            return schemas_1.Convert.toResponseForSecretsDeleteResponse(response);
        });
    }
}
exports.SecretsClient = SecretsClient;
