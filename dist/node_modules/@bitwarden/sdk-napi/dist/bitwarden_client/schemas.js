"use strict";
// To parse this data:
//
//   import { Convert, ClientSettings, Command, DocRef, ResponseForAPIKeyLoginResponse, ResponseForFingerprintResponse, ResponseForPasswordLoginResponse, ResponseForProjectResponse, ResponseForProjectsDeleteResponse, ResponseForProjectsResponse, ResponseForSecretIdentifiersResponse, ResponseForSecretResponse, ResponseForSecretsDeleteResponse, ResponseForSecretsResponse, ResponseForSyncResponse, ResponseForUserAPIKeyResponse } from "./file";
//
//   const clientSettings = Convert.toClientSettings(json);
//   const command = Convert.toCommand(json);
//   const docRef = Convert.toDocRef(json);
//   const responseForAPIKeyLoginResponse = Convert.toResponseForAPIKeyLoginResponse(json);
//   const responseForFingerprintResponse = Convert.toResponseForFingerprintResponse(json);
//   const responseForPasswordLoginResponse = Convert.toResponseForPasswordLoginResponse(json);
//   const responseForProjectResponse = Convert.toResponseForProjectResponse(json);
//   const responseForProjectsDeleteResponse = Convert.toResponseForProjectsDeleteResponse(json);
//   const responseForProjectsResponse = Convert.toResponseForProjectsResponse(json);
//   const responseForSecretIdentifiersResponse = Convert.toResponseForSecretIdentifiersResponse(json);
//   const responseForSecretResponse = Convert.toResponseForSecretResponse(json);
//   const responseForSecretsDeleteResponse = Convert.toResponseForSecretsDeleteResponse(json);
//   const responseForSecretsResponse = Convert.toResponseForSecretsResponse(json);
//   const responseForSyncResponse = Convert.toResponseForSyncResponse(json);
//   const responseForUserAPIKeyResponse = Convert.toResponseForUserAPIKeyResponse(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Convert = exports.SendType = exports.ExportFormatEnum = exports.CipherType = exports.SecureNoteType = exports.CipherRepromptType = exports.URIMatchType = exports.FieldType = exports.LinkedIDType = exports.TwoFactorProvider = exports.DeviceType = void 0;
/**
 * Device type to send to Bitwarden. Defaults to SDK
 */
var DeviceType;
(function (DeviceType) {
    DeviceType["Android"] = "Android";
    DeviceType["AndroidAmazon"] = "AndroidAmazon";
    DeviceType["ChromeBrowser"] = "ChromeBrowser";
    DeviceType["ChromeExtension"] = "ChromeExtension";
    DeviceType["EdgeBrowser"] = "EdgeBrowser";
    DeviceType["EdgeExtension"] = "EdgeExtension";
    DeviceType["FirefoxBrowser"] = "FirefoxBrowser";
    DeviceType["FirefoxExtension"] = "FirefoxExtension";
    DeviceType["IEBrowser"] = "IEBrowser";
    DeviceType["IOS"] = "iOS";
    DeviceType["LinuxDesktop"] = "LinuxDesktop";
    DeviceType["MACOSDesktop"] = "MacOsDesktop";
    DeviceType["OperaBrowser"] = "OperaBrowser";
    DeviceType["OperaExtension"] = "OperaExtension";
    DeviceType["SDK"] = "SDK";
    DeviceType["SafariBrowser"] = "SafariBrowser";
    DeviceType["SafariExtension"] = "SafariExtension";
    DeviceType["UWP"] = "UWP";
    DeviceType["UnknownBrowser"] = "UnknownBrowser";
    DeviceType["VivaldiBrowser"] = "VivaldiBrowser";
    DeviceType["VivaldiExtension"] = "VivaldiExtension";
    DeviceType["WindowsDesktop"] = "WindowsDesktop";
})(DeviceType || (exports.DeviceType = DeviceType = {}));
/**
 * Two-factor provider
 */
var TwoFactorProvider;
(function (TwoFactorProvider) {
    TwoFactorProvider["Authenticator"] = "Authenticator";
    TwoFactorProvider["Duo"] = "Duo";
    TwoFactorProvider["Email"] = "Email";
    TwoFactorProvider["OrganizationDuo"] = "OrganizationDuo";
    TwoFactorProvider["Remember"] = "Remember";
    TwoFactorProvider["U2F"] = "U2f";
    TwoFactorProvider["WebAuthn"] = "WebAuthn";
    TwoFactorProvider["Yubikey"] = "Yubikey";
})(TwoFactorProvider || (exports.TwoFactorProvider = TwoFactorProvider = {}));
var LinkedIDType;
(function (LinkedIDType) {
    LinkedIDType["Address1"] = "Address1";
    LinkedIDType["Address2"] = "Address2";
    LinkedIDType["Address3"] = "Address3";
    LinkedIDType["Brand"] = "Brand";
    LinkedIDType["CardholderName"] = "CardholderName";
    LinkedIDType["City"] = "City";
    LinkedIDType["Code"] = "Code";
    LinkedIDType["Company"] = "Company";
    LinkedIDType["Country"] = "Country";
    LinkedIDType["Email"] = "Email";
    LinkedIDType["ExpMonth"] = "ExpMonth";
    LinkedIDType["ExpYear"] = "ExpYear";
    LinkedIDType["FirstName"] = "FirstName";
    LinkedIDType["FullName"] = "FullName";
    LinkedIDType["LastName"] = "LastName";
    LinkedIDType["LicenseNumber"] = "LicenseNumber";
    LinkedIDType["MiddleName"] = "MiddleName";
    LinkedIDType["Number"] = "Number";
    LinkedIDType["PassportNumber"] = "PassportNumber";
    LinkedIDType["Password"] = "Password";
    LinkedIDType["Phone"] = "Phone";
    LinkedIDType["PostalCode"] = "PostalCode";
    LinkedIDType["Ssn"] = "Ssn";
    LinkedIDType["State"] = "State";
    LinkedIDType["Title"] = "Title";
    LinkedIDType["Username"] = "Username";
})(LinkedIDType || (exports.LinkedIDType = LinkedIDType = {}));
var FieldType;
(function (FieldType) {
    FieldType["Boolean"] = "Boolean";
    FieldType["Hidden"] = "Hidden";
    FieldType["Linked"] = "Linked";
    FieldType["Text"] = "Text";
})(FieldType || (exports.FieldType = FieldType = {}));
var URIMatchType;
(function (URIMatchType) {
    URIMatchType["Domain"] = "domain";
    URIMatchType["Exact"] = "exact";
    URIMatchType["Host"] = "host";
    URIMatchType["Never"] = "never";
    URIMatchType["RegularExpression"] = "regularExpression";
    URIMatchType["StartsWith"] = "startsWith";
})(URIMatchType || (exports.URIMatchType = URIMatchType = {}));
var CipherRepromptType;
(function (CipherRepromptType) {
    CipherRepromptType["None"] = "None";
    CipherRepromptType["Password"] = "Password";
})(CipherRepromptType || (exports.CipherRepromptType = CipherRepromptType = {}));
var SecureNoteType;
(function (SecureNoteType) {
    SecureNoteType["Generic"] = "Generic";
})(SecureNoteType || (exports.SecureNoteType = SecureNoteType = {}));
var CipherType;
(function (CipherType) {
    CipherType["Card"] = "Card";
    CipherType["Identity"] = "Identity";
    CipherType["Login"] = "Login";
    CipherType["SecureNote"] = "SecureNote";
})(CipherType || (exports.CipherType = CipherType = {}));
var ExportFormatEnum;
(function (ExportFormatEnum) {
    ExportFormatEnum["AccountEncryptedJSON"] = "AccountEncryptedJson";
    ExportFormatEnum["CSV"] = "Csv";
    ExportFormatEnum["JSON"] = "Json";
})(ExportFormatEnum || (exports.ExportFormatEnum = ExportFormatEnum = {}));
var SendType;
(function (SendType) {
    SendType["File"] = "File";
    SendType["Text"] = "Text";
})(SendType || (exports.SendType = SendType = {}));
// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
class Convert {
    static toClientSettings(json) {
        return cast(JSON.parse(json), r("ClientSettings"));
    }
    static clientSettingsToJson(value) {
        return JSON.stringify(uncast(value, r("ClientSettings")), null, 2);
    }
    static toCommand(json) {
        return cast(JSON.parse(json), r("Command"));
    }
    static commandToJson(value) {
        return JSON.stringify(uncast(value, r("Command")), null, 2);
    }
    static toDocRef(json) {
        return cast(JSON.parse(json), r("DocRef"));
    }
    static docRefToJson(value) {
        return JSON.stringify(uncast(value, r("DocRef")), null, 2);
    }
    static toResponseForAPIKeyLoginResponse(json) {
        return cast(JSON.parse(json), r("ResponseForAPIKeyLoginResponse"));
    }
    static responseForAPIKeyLoginResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForAPIKeyLoginResponse")), null, 2);
    }
    static toResponseForFingerprintResponse(json) {
        return cast(JSON.parse(json), r("ResponseForFingerprintResponse"));
    }
    static responseForFingerprintResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForFingerprintResponse")), null, 2);
    }
    static toResponseForPasswordLoginResponse(json) {
        return cast(JSON.parse(json), r("ResponseForPasswordLoginResponse"));
    }
    static responseForPasswordLoginResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForPasswordLoginResponse")), null, 2);
    }
    static toResponseForProjectResponse(json) {
        return cast(JSON.parse(json), r("ResponseForProjectResponse"));
    }
    static responseForProjectResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForProjectResponse")), null, 2);
    }
    static toResponseForProjectsDeleteResponse(json) {
        return cast(JSON.parse(json), r("ResponseForProjectsDeleteResponse"));
    }
    static responseForProjectsDeleteResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForProjectsDeleteResponse")), null, 2);
    }
    static toResponseForProjectsResponse(json) {
        return cast(JSON.parse(json), r("ResponseForProjectsResponse"));
    }
    static responseForProjectsResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForProjectsResponse")), null, 2);
    }
    static toResponseForSecretIdentifiersResponse(json) {
        return cast(JSON.parse(json), r("ResponseForSecretIdentifiersResponse"));
    }
    static responseForSecretIdentifiersResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForSecretIdentifiersResponse")), null, 2);
    }
    static toResponseForSecretResponse(json) {
        return cast(JSON.parse(json), r("ResponseForSecretResponse"));
    }
    static responseForSecretResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForSecretResponse")), null, 2);
    }
    static toResponseForSecretsDeleteResponse(json) {
        return cast(JSON.parse(json), r("ResponseForSecretsDeleteResponse"));
    }
    static responseForSecretsDeleteResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForSecretsDeleteResponse")), null, 2);
    }
    static toResponseForSecretsResponse(json) {
        return cast(JSON.parse(json), r("ResponseForSecretsResponse"));
    }
    static responseForSecretsResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForSecretsResponse")), null, 2);
    }
    static toResponseForSyncResponse(json) {
        return cast(JSON.parse(json), r("ResponseForSyncResponse"));
    }
    static responseForSyncResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForSyncResponse")), null, 2);
    }
    static toResponseForUserAPIKeyResponse(json) {
        return cast(JSON.parse(json), r("ResponseForUserAPIKeyResponse"));
    }
    static responseForUserAPIKeyResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForUserAPIKeyResponse")), null, 2);
    }
}
exports.Convert = Convert;
function invalidValue(typ, val, key, parent = '') {
    const prettyTyp = prettyTypeName(typ);
    const parentText = parent ? ` on ${parent}` : '';
    const keyText = key ? ` for key "${key}"` : '';
    throw Error(`Invalid value${keyText}${parentText}. Expected ${prettyTyp} but got ${JSON.stringify(val)}`);
}
function prettyTypeName(typ) {
    if (Array.isArray(typ)) {
        if (typ.length === 2 && typ[0] === undefined) {
            return `an optional ${prettyTypeName(typ[1])}`;
        }
        else {
            return `one of [${typ.map(a => { return prettyTypeName(a); }).join(", ")}]`;
        }
    }
    else if (typeof typ === "object" && typ.literal !== undefined) {
        return typ.literal;
    }
    else {
        return typeof typ;
    }
}
function jsonToJSProps(typ) {
    if (typ.jsonToJS === undefined) {
        const map = {};
        typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}
function jsToJSONProps(typ) {
    if (typ.jsToJSON === undefined) {
        const map = {};
        typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}
function transform(val, typ, getProps, key = '', parent = '') {
    function transformPrimitive(typ, val) {
        if (typeof typ === typeof val)
            return val;
        return invalidValue(typ, val, key, parent);
    }
    function transformUnion(typs, val) {
        // val must validate against one typ in typs
        const l = typs.length;
        for (let i = 0; i < l; i++) {
            const typ = typs[i];
            try {
                return transform(val, typ, getProps);
            }
            catch (_) { }
        }
        return invalidValue(typs, val, key, parent);
    }
    function transformEnum(cases, val) {
        if (cases.indexOf(val) !== -1)
            return val;
        return invalidValue(cases.map(a => { return l(a); }), val, key, parent);
    }
    function transformArray(typ, val) {
        // val must be an array with no invalid elements
        if (!Array.isArray(val))
            return invalidValue(l("array"), val, key, parent);
        return val.map(el => transform(el, typ, getProps));
    }
    function transformDate(val) {
        if (val === null) {
            return null;
        }
        const d = new Date(val);
        if (isNaN(d.valueOf())) {
            return invalidValue(l("Date"), val, key, parent);
        }
        return d;
    }
    function transformObject(props, additional, val) {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue(l(ref || "object"), val, key, parent);
        }
        const result = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps, key, ref);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps, key, ref);
            }
        });
        return result;
    }
    if (typ === "any")
        return val;
    if (typ === null) {
        if (val === null)
            return val;
        return invalidValue(typ, val, key, parent);
    }
    if (typ === false)
        return invalidValue(typ, val, key, parent);
    let ref = undefined;
    while (typeof typ === "object" && typ.ref !== undefined) {
        ref = typ.ref;
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ))
        return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems") ? transformArray(typ.arrayItems, val)
                : typ.hasOwnProperty("props") ? transformObject(getProps(typ), typ.additional, val)
                    : invalidValue(typ, val, key, parent);
    }
    // Numbers can be parsed by Date but shouldn't be.
    if (typ === Date && typeof val !== "number")
        return transformDate(val);
    return transformPrimitive(typ, val);
}
function cast(val, typ) {
    return transform(val, typ, jsonToJSProps);
}
function uncast(val, typ) {
    return transform(val, typ, jsToJSONProps);
}
function l(typ) {
    return { literal: typ };
}
function a(typ) {
    return { arrayItems: typ };
}
function u(...typs) {
    return { unionMembers: typs };
}
function o(props, additional) {
    return { props, additional };
}
function m(additional) {
    return { props: [], additional };
}
function r(name) {
    return { ref: name };
}
const typeMap = {
    "ClientSettings": o([
        { json: "apiUrl", js: "apiUrl", typ: u(undefined, "") },
        { json: "deviceType", js: "deviceType", typ: u(undefined, r("DeviceType")) },
        { json: "identityUrl", js: "identityUrl", typ: u(undefined, "") },
        { json: "userAgent", js: "userAgent", typ: u(undefined, "") },
    ], false),
    "Command": o([
        { json: "passwordLogin", js: "passwordLogin", typ: u(undefined, r("PasswordLoginRequest")) },
        { json: "apiKeyLogin", js: "apiKeyLogin", typ: u(undefined, r("APIKeyLoginRequest")) },
        { json: "accessTokenLogin", js: "accessTokenLogin", typ: u(undefined, r("AccessTokenLoginRequest")) },
        { json: "getUserApiKey", js: "getUserApiKey", typ: u(undefined, r("SecretVerificationRequest")) },
        { json: "fingerprint", js: "fingerprint", typ: u(undefined, r("FingerprintRequest")) },
        { json: "sync", js: "sync", typ: u(undefined, r("SyncRequest")) },
        { json: "secrets", js: "secrets", typ: u(undefined, r("SecretsCommand")) },
        { json: "projects", js: "projects", typ: u(undefined, r("ProjectsCommand")) },
    ], false),
    "AccessTokenLoginRequest": o([
        { json: "accessToken", js: "accessToken", typ: "" },
    ], false),
    "APIKeyLoginRequest": o([
        { json: "clientId", js: "clientId", typ: "" },
        { json: "clientSecret", js: "clientSecret", typ: "" },
        { json: "password", js: "password", typ: "" },
    ], false),
    "FingerprintRequest": o([
        { json: "fingerprintMaterial", js: "fingerprintMaterial", typ: "" },
        { json: "publicKey", js: "publicKey", typ: "" },
    ], false),
    "SecretVerificationRequest": o([
        { json: "masterPassword", js: "masterPassword", typ: u(undefined, u(null, "")) },
        { json: "otp", js: "otp", typ: u(undefined, u(null, "")) },
    ], false),
    "PasswordLoginRequest": o([
        { json: "email", js: "email", typ: "" },
        { json: "kdf", js: "kdf", typ: r("PasswordLoginKdf") },
        { json: "password", js: "password", typ: "" },
        { json: "twoFactor", js: "twoFactor", typ: u(undefined, u(r("TwoFactorRequest"), null)) },
    ], false),
    "PasswordLoginKdf": o([
        { json: "pBKDF2", js: "pBKDF2", typ: u(undefined, r("PurplePBKDF2")) },
        { json: "argon2id", js: "argon2id", typ: u(undefined, r("PurpleArgon2ID")) },
    ], false),
    "PurpleArgon2ID": o([
        { json: "iterations", js: "iterations", typ: 0 },
        { json: "memory", js: "memory", typ: 0 },
        { json: "parallelism", js: "parallelism", typ: 0 },
    ], false),
    "PurplePBKDF2": o([
        { json: "iterations", js: "iterations", typ: 0 },
    ], false),
    "TwoFactorRequest": o([
        { json: "provider", js: "provider", typ: r("TwoFactorProvider") },
        { json: "remember", js: "remember", typ: true },
        { json: "token", js: "token", typ: "" },
    ], false),
    "ProjectsCommand": o([
        { json: "get", js: "get", typ: u(undefined, r("ProjectGetRequest")) },
        { json: "create", js: "create", typ: u(undefined, r("ProjectCreateRequest")) },
        { json: "list", js: "list", typ: u(undefined, r("ProjectsListRequest")) },
        { json: "update", js: "update", typ: u(undefined, r("ProjectPutRequest")) },
        { json: "delete", js: "delete", typ: u(undefined, r("ProjectsDeleteRequest")) },
    ], false),
    "ProjectCreateRequest": o([
        { json: "name", js: "name", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
    ], false),
    "ProjectsDeleteRequest": o([
        { json: "ids", js: "ids", typ: a("") },
    ], false),
    "ProjectGetRequest": o([
        { json: "id", js: "id", typ: "" },
    ], false),
    "ProjectsListRequest": o([
        { json: "organizationId", js: "organizationId", typ: "" },
    ], false),
    "ProjectPutRequest": o([
        { json: "id", js: "id", typ: "" },
        { json: "name", js: "name", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
    ], false),
    "SecretsCommand": o([
        { json: "get", js: "get", typ: u(undefined, r("SecretGetRequest")) },
        { json: "getByIds", js: "getByIds", typ: u(undefined, r("SecretsGetRequest")) },
        { json: "create", js: "create", typ: u(undefined, r("SecretCreateRequest")) },
        { json: "list", js: "list", typ: u(undefined, r("SecretIdentifiersRequest")) },
        { json: "update", js: "update", typ: u(undefined, r("SecretPutRequest")) },
        { json: "delete", js: "delete", typ: u(undefined, r("SecretsDeleteRequest")) },
    ], false),
    "SecretCreateRequest": o([
        { json: "key", js: "key", typ: "" },
        { json: "note", js: "note", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
        { json: "projectIds", js: "projectIds", typ: u(undefined, u(a(""), null)) },
        { json: "value", js: "value", typ: "" },
    ], false),
    "SecretsDeleteRequest": o([
        { json: "ids", js: "ids", typ: a("") },
    ], false),
    "SecretGetRequest": o([
        { json: "id", js: "id", typ: "" },
    ], false),
    "SecretsGetRequest": o([
        { json: "ids", js: "ids", typ: a("") },
    ], false),
    "SecretIdentifiersRequest": o([
        { json: "organizationId", js: "organizationId", typ: "" },
    ], false),
    "SecretPutRequest": o([
        { json: "id", js: "id", typ: "" },
        { json: "key", js: "key", typ: "" },
        { json: "note", js: "note", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
        { json: "projectIds", js: "projectIds", typ: u(undefined, u(a(""), null)) },
        { json: "value", js: "value", typ: "" },
    ], false),
    "SyncRequest": o([
        { json: "excludeSubdomains", js: "excludeSubdomains", typ: u(undefined, u(true, null)) },
    ], false),
    "DocRef": o([
        { json: "Cipher", js: "Cipher", typ: u(undefined, r("Cipher")) },
        { json: "CipherView", js: "CipherView", typ: u(undefined, r("CipherView")) },
        { json: "Collection", js: "Collection", typ: u(undefined, r("Collection")) },
        { json: "Folder", js: "Folder", typ: u(undefined, r("Folder")) },
        { json: "FolderView", js: "FolderView", typ: u(undefined, r("FolderView")) },
        { json: "Send", js: "Send", typ: u(undefined, r("Send")) },
        { json: "SendView", js: "SendView", typ: u(undefined, r("SendView")) },
        { json: "SendListView", js: "SendListView", typ: u(undefined, r("SendListView")) },
        { json: "InitCryptoRequest", js: "InitCryptoRequest", typ: u(undefined, r("InitCryptoRequest")) },
        { json: "PasswordGeneratorRequest", js: "PasswordGeneratorRequest", typ: u(undefined, r("PasswordGeneratorRequest")) },
        { json: "PassphraseGeneratorRequest", js: "PassphraseGeneratorRequest", typ: u(undefined, r("PassphraseGeneratorRequest")) },
        { json: "ExportFormat", js: "ExportFormat", typ: u(undefined, u(r("ExportFormatClass"), r("ExportFormatEnum"))) },
        { json: "MasterPasswordPolicyOptions", js: "MasterPasswordPolicyOptions", typ: u(undefined, r("MasterPasswordPolicyOptions")) },
        { json: "Kdf", js: "Kdf", typ: u(undefined, r("InitCryptoRequestKdf")) },
    ], false),
    "Cipher": o([
        { json: "attachments", js: "attachments", typ: u(undefined, u(a(r("Attachment")), null)) },
        { json: "card", js: "card", typ: u(undefined, u(r("Card"), null)) },
        { json: "collectionIds", js: "collectionIds", typ: a("") },
        { json: "creationDate", js: "creationDate", typ: Date },
        { json: "deletedDate", js: "deletedDate", typ: u(undefined, u(Date, null)) },
        { json: "edit", js: "edit", typ: true },
        { json: "favorite", js: "favorite", typ: true },
        { json: "fields", js: "fields", typ: u(undefined, u(a(r("Field")), null)) },
        { json: "folderId", js: "folderId", typ: u(undefined, u(null, "")) },
        { json: "id", js: "id", typ: u(undefined, u(null, "")) },
        { json: "identity", js: "identity", typ: u(undefined, u(r("Identity"), null)) },
        { json: "localData", js: "localData", typ: u(undefined, u(r("LocalData"), null)) },
        { json: "login", js: "login", typ: u(undefined, u(r("Login"), null)) },
        { json: "name", js: "name", typ: "" },
        { json: "notes", js: "notes", typ: u(undefined, u(null, "")) },
        { json: "organizationId", js: "organizationId", typ: u(undefined, u(null, "")) },
        { json: "organizationUseTotp", js: "organizationUseTotp", typ: true },
        { json: "passwordHistory", js: "passwordHistory", typ: u(undefined, u(a(r("PasswordHistory")), null)) },
        { json: "reprompt", js: "reprompt", typ: r("CipherRepromptType") },
        { json: "revisionDate", js: "revisionDate", typ: Date },
        { json: "secureNote", js: "secureNote", typ: u(undefined, u(r("SecureNote"), null)) },
        { json: "type", js: "type", typ: r("CipherType") },
        { json: "viewPassword", js: "viewPassword", typ: true },
    ], false),
    "Attachment": o([
        { json: "fileName", js: "fileName", typ: u(undefined, u(null, "")) },
        { json: "id", js: "id", typ: u(undefined, u(null, "")) },
        { json: "key", js: "key", typ: u(undefined, u(null, "")) },
        { json: "size", js: "size", typ: u(undefined, u(null, "")) },
        { json: "sizeName", js: "sizeName", typ: u(undefined, u(null, "")) },
        { json: "url", js: "url", typ: u(undefined, u(null, "")) },
    ], false),
    "Card": o([
        { json: "brand", js: "brand", typ: u(undefined, u(null, "")) },
        { json: "cardholderName", js: "cardholderName", typ: u(undefined, u(null, "")) },
        { json: "code", js: "code", typ: u(undefined, u(null, "")) },
        { json: "expMonth", js: "expMonth", typ: u(undefined, u(null, "")) },
        { json: "expYear", js: "expYear", typ: u(undefined, u(null, "")) },
        { json: "number", js: "number", typ: u(undefined, u(null, "")) },
    ], false),
    "Field": o([
        { json: "linkedId", js: "linkedId", typ: u(undefined, u(r("LinkedIDType"), null)) },
        { json: "name", js: "name", typ: u(undefined, u(null, "")) },
        { json: "type", js: "type", typ: r("FieldType") },
        { json: "value", js: "value", typ: u(undefined, u(null, "")) },
    ], false),
    "Identity": o([
        { json: "address1", js: "address1", typ: u(undefined, u(null, "")) },
        { json: "address2", js: "address2", typ: u(undefined, u(null, "")) },
        { json: "address3", js: "address3", typ: u(undefined, u(null, "")) },
        { json: "city", js: "city", typ: u(undefined, u(null, "")) },
        { json: "company", js: "company", typ: u(undefined, u(null, "")) },
        { json: "country", js: "country", typ: u(undefined, u(null, "")) },
        { json: "email", js: "email", typ: u(undefined, u(null, "")) },
        { json: "firstName", js: "firstName", typ: u(undefined, u(null, "")) },
        { json: "lastName", js: "lastName", typ: u(undefined, u(null, "")) },
        { json: "licenseNumber", js: "licenseNumber", typ: u(undefined, u(null, "")) },
        { json: "middleName", js: "middleName", typ: u(undefined, u(null, "")) },
        { json: "passportNumber", js: "passportNumber", typ: u(undefined, u(null, "")) },
        { json: "phone", js: "phone", typ: u(undefined, u(null, "")) },
        { json: "postalCode", js: "postalCode", typ: u(undefined, u(null, "")) },
        { json: "ssn", js: "ssn", typ: u(undefined, u(null, "")) },
        { json: "state", js: "state", typ: u(undefined, u(null, "")) },
        { json: "title", js: "title", typ: u(undefined, u(null, "")) },
        { json: "username", js: "username", typ: u(undefined, u(null, "")) },
    ], false),
    "LocalData": o([
        { json: "lastLaunched", js: "lastLaunched", typ: u(undefined, u(0, null)) },
        { json: "lastUsedDate", js: "lastUsedDate", typ: u(undefined, u(0, null)) },
    ], false),
    "Login": o([
        { json: "autofillOnPageLoad", js: "autofillOnPageLoad", typ: u(undefined, u(true, null)) },
        { json: "password", js: "password", typ: u(undefined, u(null, "")) },
        { json: "passwordRevisionDate", js: "passwordRevisionDate", typ: u(undefined, u(Date, null)) },
        { json: "totp", js: "totp", typ: u(undefined, u(null, "")) },
        { json: "uris", js: "uris", typ: u(undefined, u(a(r("LoginURI")), null)) },
        { json: "username", js: "username", typ: u(undefined, u(null, "")) },
    ], false),
    "LoginURI": o([
        { json: "match", js: "match", typ: u(undefined, u(r("URIMatchType"), null)) },
        { json: "uri", js: "uri", typ: u(undefined, u(null, "")) },
    ], false),
    "PasswordHistory": o([
        { json: "lastUsedDate", js: "lastUsedDate", typ: Date },
        { json: "password", js: "password", typ: "" },
    ], false),
    "SecureNote": o([
        { json: "type", js: "type", typ: r("SecureNoteType") },
    ], false),
    "CipherView": o([
        { json: "attachments", js: "attachments", typ: u(undefined, u(a(r("AttachmentView")), null)) },
        { json: "card", js: "card", typ: u(undefined, u(r("CardView"), null)) },
        { json: "collectionIds", js: "collectionIds", typ: a("") },
        { json: "creationDate", js: "creationDate", typ: Date },
        { json: "deletedDate", js: "deletedDate", typ: u(undefined, u(Date, null)) },
        { json: "edit", js: "edit", typ: true },
        { json: "favorite", js: "favorite", typ: true },
        { json: "fields", js: "fields", typ: u(undefined, u(a(r("FieldView")), null)) },
        { json: "folderId", js: "folderId", typ: u(undefined, u(null, "")) },
        { json: "id", js: "id", typ: u(undefined, u(null, "")) },
        { json: "identity", js: "identity", typ: u(undefined, u(r("IdentityView"), null)) },
        { json: "localData", js: "localData", typ: u(undefined, u(r("LocalDataView"), null)) },
        { json: "login", js: "login", typ: u(undefined, u(r("LoginView"), null)) },
        { json: "name", js: "name", typ: "" },
        { json: "notes", js: "notes", typ: u(undefined, u(null, "")) },
        { json: "organizationId", js: "organizationId", typ: u(undefined, u(null, "")) },
        { json: "organizationUseTotp", js: "organizationUseTotp", typ: true },
        { json: "passwordHistory", js: "passwordHistory", typ: u(undefined, u(a(r("PasswordHistoryView")), null)) },
        { json: "reprompt", js: "reprompt", typ: r("CipherRepromptType") },
        { json: "revisionDate", js: "revisionDate", typ: Date },
        { json: "secureNote", js: "secureNote", typ: u(undefined, u(r("SecureNoteView"), null)) },
        { json: "type", js: "type", typ: r("CipherType") },
        { json: "viewPassword", js: "viewPassword", typ: true },
    ], false),
    "AttachmentView": o([
        { json: "fileName", js: "fileName", typ: u(undefined, u(null, "")) },
        { json: "id", js: "id", typ: u(undefined, u(null, "")) },
        { json: "key", js: "key", typ: u(undefined, u(null, "")) },
        { json: "size", js: "size", typ: u(undefined, u(null, "")) },
        { json: "sizeName", js: "sizeName", typ: u(undefined, u(null, "")) },
        { json: "url", js: "url", typ: u(undefined, u(null, "")) },
    ], false),
    "CardView": o([
        { json: "brand", js: "brand", typ: u(undefined, u(null, "")) },
        { json: "cardholderName", js: "cardholderName", typ: u(undefined, u(null, "")) },
        { json: "code", js: "code", typ: u(undefined, u(null, "")) },
        { json: "expMonth", js: "expMonth", typ: u(undefined, u(null, "")) },
        { json: "expYear", js: "expYear", typ: u(undefined, u(null, "")) },
        { json: "number", js: "number", typ: u(undefined, u(null, "")) },
    ], false),
    "FieldView": o([
        { json: "linkedId", js: "linkedId", typ: u(undefined, u(r("LinkedIDType"), null)) },
        { json: "name", js: "name", typ: u(undefined, u(null, "")) },
        { json: "type", js: "type", typ: r("FieldType") },
        { json: "value", js: "value", typ: u(undefined, u(null, "")) },
    ], false),
    "IdentityView": o([
        { json: "address1", js: "address1", typ: u(undefined, u(null, "")) },
        { json: "address2", js: "address2", typ: u(undefined, u(null, "")) },
        { json: "address3", js: "address3", typ: u(undefined, u(null, "")) },
        { json: "city", js: "city", typ: u(undefined, u(null, "")) },
        { json: "company", js: "company", typ: u(undefined, u(null, "")) },
        { json: "country", js: "country", typ: u(undefined, u(null, "")) },
        { json: "email", js: "email", typ: u(undefined, u(null, "")) },
        { json: "firstName", js: "firstName", typ: u(undefined, u(null, "")) },
        { json: "lastName", js: "lastName", typ: u(undefined, u(null, "")) },
        { json: "licenseNumber", js: "licenseNumber", typ: u(undefined, u(null, "")) },
        { json: "middleName", js: "middleName", typ: u(undefined, u(null, "")) },
        { json: "passportNumber", js: "passportNumber", typ: u(undefined, u(null, "")) },
        { json: "phone", js: "phone", typ: u(undefined, u(null, "")) },
        { json: "postalCode", js: "postalCode", typ: u(undefined, u(null, "")) },
        { json: "ssn", js: "ssn", typ: u(undefined, u(null, "")) },
        { json: "state", js: "state", typ: u(undefined, u(null, "")) },
        { json: "title", js: "title", typ: u(undefined, u(null, "")) },
        { json: "username", js: "username", typ: u(undefined, u(null, "")) },
    ], false),
    "LocalDataView": o([
        { json: "lastLaunched", js: "lastLaunched", typ: u(undefined, u(0, null)) },
        { json: "lastUsedDate", js: "lastUsedDate", typ: u(undefined, u(0, null)) },
    ], false),
    "LoginView": o([
        { json: "autofillOnPageLoad", js: "autofillOnPageLoad", typ: u(undefined, u(true, null)) },
        { json: "password", js: "password", typ: u(undefined, u(null, "")) },
        { json: "passwordRevisionDate", js: "passwordRevisionDate", typ: u(undefined, u(Date, null)) },
        { json: "totp", js: "totp", typ: u(undefined, u(null, "")) },
        { json: "uris", js: "uris", typ: u(undefined, u(a(r("LoginURIView")), null)) },
        { json: "username", js: "username", typ: u(undefined, u(null, "")) },
    ], false),
    "LoginURIView": o([
        { json: "match", js: "match", typ: u(undefined, u(r("URIMatchType"), null)) },
        { json: "uri", js: "uri", typ: u(undefined, u(null, "")) },
    ], false),
    "PasswordHistoryView": o([
        { json: "lastUsedDate", js: "lastUsedDate", typ: Date },
        { json: "password", js: "password", typ: "" },
    ], false),
    "SecureNoteView": o([
        { json: "type", js: "type", typ: r("SecureNoteType") },
    ], false),
    "Collection": o([
        { json: "externalId", js: "externalId", typ: u(undefined, u(null, "")) },
        { json: "hidePasswords", js: "hidePasswords", typ: true },
        { json: "id", js: "id", typ: "" },
        { json: "name", js: "name", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
        { json: "readOnly", js: "readOnly", typ: true },
    ], false),
    "ExportFormatClass": o([
        { json: "EncryptedJson", js: "EncryptedJson", typ: r("EncryptedJSON") },
    ], false),
    "EncryptedJSON": o([
        { json: "password", js: "password", typ: "" },
    ], "any"),
    "Folder": o([
        { json: "id", js: "id", typ: "" },
        { json: "name", js: "name", typ: "" },
        { json: "revisionDate", js: "revisionDate", typ: Date },
    ], "any"),
    "FolderView": o([
        { json: "id", js: "id", typ: "" },
        { json: "name", js: "name", typ: "" },
        { json: "revisionDate", js: "revisionDate", typ: Date },
    ], "any"),
    "InitCryptoRequest": o([
        { json: "email", js: "email", typ: "" },
        { json: "kdfParams", js: "kdfParams", typ: r("InitCryptoRequestKdf") },
        { json: "organizationKeys", js: "organizationKeys", typ: m("") },
        { json: "password", js: "password", typ: "" },
        { json: "privateKey", js: "privateKey", typ: "" },
        { json: "userKey", js: "userKey", typ: "" },
    ], false),
    "InitCryptoRequestKdf": o([
        { json: "pBKDF2", js: "pBKDF2", typ: u(undefined, r("FluffyPBKDF2")) },
        { json: "argon2id", js: "argon2id", typ: u(undefined, r("FluffyArgon2ID")) },
    ], false),
    "FluffyArgon2ID": o([
        { json: "iterations", js: "iterations", typ: 0 },
        { json: "memory", js: "memory", typ: 0 },
        { json: "parallelism", js: "parallelism", typ: 0 },
    ], false),
    "FluffyPBKDF2": o([
        { json: "iterations", js: "iterations", typ: 0 },
    ], false),
    "MasterPasswordPolicyOptions": o([
        { json: "enforce_on_login", js: "enforce_on_login", typ: true },
        { json: "min_complexity", js: "min_complexity", typ: 0 },
        { json: "min_length", js: "min_length", typ: 0 },
        { json: "require_lower", js: "require_lower", typ: true },
        { json: "require_numbers", js: "require_numbers", typ: true },
        { json: "require_special", js: "require_special", typ: true },
        { json: "require_upper", js: "require_upper", typ: true },
    ], "any"),
    "PassphraseGeneratorRequest": o([
        { json: "capitalize", js: "capitalize", typ: u(undefined, u(true, null)) },
        { json: "includeNumber", js: "includeNumber", typ: u(undefined, u(true, null)) },
        { json: "numWords", js: "numWords", typ: u(undefined, u(0, null)) },
        { json: "wordSeparator", js: "wordSeparator", typ: u(undefined, u(null, "")) },
    ], false),
    "PasswordGeneratorRequest": o([
        { json: "avoidAmbiguous", js: "avoidAmbiguous", typ: u(undefined, u(true, null)) },
        { json: "length", js: "length", typ: u(undefined, u(0, null)) },
        { json: "lowercase", js: "lowercase", typ: true },
        { json: "minLowercase", js: "minLowercase", typ: u(undefined, u(true, null)) },
        { json: "minNumber", js: "minNumber", typ: u(undefined, u(true, null)) },
        { json: "minSpecial", js: "minSpecial", typ: u(undefined, u(true, null)) },
        { json: "minUppercase", js: "minUppercase", typ: u(undefined, u(true, null)) },
        { json: "numbers", js: "numbers", typ: true },
        { json: "special", js: "special", typ: true },
        { json: "uppercase", js: "uppercase", typ: true },
    ], false),
    "Send": o([
        { json: "accessCount", js: "accessCount", typ: 0 },
        { json: "accessId", js: "accessId", typ: "" },
        { json: "deletionDate", js: "deletionDate", typ: Date },
        { json: "disabled", js: "disabled", typ: true },
        { json: "expirationDate", js: "expirationDate", typ: u(undefined, u(Date, null)) },
        { json: "file", js: "file", typ: u(undefined, u(r("SendFile"), null)) },
        { json: "hideEmail", js: "hideEmail", typ: true },
        { json: "id", js: "id", typ: "" },
        { json: "key", js: "key", typ: "" },
        { json: "maxAccessCount", js: "maxAccessCount", typ: u(undefined, u(0, null)) },
        { json: "name", js: "name", typ: "" },
        { json: "notes", js: "notes", typ: u(undefined, u(null, "")) },
        { json: "password", js: "password", typ: u(undefined, u(null, "")) },
        { json: "revisionDate", js: "revisionDate", typ: Date },
        { json: "text", js: "text", typ: u(undefined, u(r("SendText"), null)) },
        { json: "type", js: "type", typ: r("SendType") },
    ], false),
    "SendFile": o([
        { json: "fileName", js: "fileName", typ: "" },
        { json: "id", js: "id", typ: "" },
        { json: "size", js: "size", typ: "" },
        { json: "sizeName", js: "sizeName", typ: "" },
    ], false),
    "SendText": o([
        { json: "hidden", js: "hidden", typ: true },
        { json: "text", js: "text", typ: u(undefined, u(null, "")) },
    ], false),
    "SendListView": o([
        { json: "accessId", js: "accessId", typ: "" },
        { json: "deletionDate", js: "deletionDate", typ: Date },
        { json: "disabled", js: "disabled", typ: true },
        { json: "expirationDate", js: "expirationDate", typ: u(undefined, u(Date, null)) },
        { json: "id", js: "id", typ: "" },
        { json: "name", js: "name", typ: "" },
        { json: "revisionDate", js: "revisionDate", typ: Date },
        { json: "type", js: "type", typ: r("SendType") },
    ], false),
    "SendView": o([
        { json: "accessCount", js: "accessCount", typ: 0 },
        { json: "accessId", js: "accessId", typ: "" },
        { json: "deletionDate", js: "deletionDate", typ: Date },
        { json: "disabled", js: "disabled", typ: true },
        { json: "expirationDate", js: "expirationDate", typ: u(undefined, u(Date, null)) },
        { json: "file", js: "file", typ: u(undefined, u(r("SendFileView"), null)) },
        { json: "hideEmail", js: "hideEmail", typ: true },
        { json: "id", js: "id", typ: "" },
        { json: "key", js: "key", typ: "" },
        { json: "maxAccessCount", js: "maxAccessCount", typ: u(undefined, u(0, null)) },
        { json: "name", js: "name", typ: "" },
        { json: "notes", js: "notes", typ: u(undefined, u(null, "")) },
        { json: "password", js: "password", typ: u(undefined, u(null, "")) },
        { json: "revisionDate", js: "revisionDate", typ: Date },
        { json: "text", js: "text", typ: u(undefined, u(r("SendTextView"), null)) },
        { json: "type", js: "type", typ: r("SendType") },
    ], false),
    "SendFileView": o([
        { json: "fileName", js: "fileName", typ: "" },
        { json: "id", js: "id", typ: "" },
        { json: "size", js: "size", typ: "" },
        { json: "sizeName", js: "sizeName", typ: "" },
    ], false),
    "SendTextView": o([
        { json: "hidden", js: "hidden", typ: true },
        { json: "text", js: "text", typ: u(undefined, u(null, "")) },
    ], false),
    "ResponseForAPIKeyLoginResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("APIKeyLoginResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "APIKeyLoginResponse": o([
        { json: "authenticated", js: "authenticated", typ: true },
        { json: "forcePasswordReset", js: "forcePasswordReset", typ: true },
        { json: "resetMasterPassword", js: "resetMasterPassword", typ: true },
        { json: "twoFactor", js: "twoFactor", typ: u(undefined, u(r("APIKeyLoginResponseTwoFactorProviders"), null)) },
    ], false),
    "APIKeyLoginResponseTwoFactorProviders": o([
        { json: "authenticator", js: "authenticator", typ: u(undefined, u(r("PurpleAuthenticator"), null)) },
        { json: "duo", js: "duo", typ: u(undefined, u(r("PurpleDuo"), null)) },
        { json: "email", js: "email", typ: u(undefined, u(r("PurpleEmail"), null)) },
        { json: "organizationDuo", js: "organizationDuo", typ: u(undefined, u(r("PurpleDuo"), null)) },
        { json: "remember", js: "remember", typ: u(undefined, u(r("PurpleRemember"), null)) },
        { json: "webAuthn", js: "webAuthn", typ: u(undefined, u(r("PurpleWebAuthn"), null)) },
        { json: "yubiKey", js: "yubiKey", typ: u(undefined, u(r("PurpleYubiKey"), null)) },
    ], false),
    "PurpleAuthenticator": o([], false),
    "PurpleDuo": o([
        { json: "host", js: "host", typ: "" },
        { json: "signature", js: "signature", typ: "" },
    ], false),
    "PurpleEmail": o([
        { json: "email", js: "email", typ: "" },
    ], false),
    "PurpleRemember": o([], false),
    "PurpleWebAuthn": o([], false),
    "PurpleYubiKey": o([
        { json: "nfc", js: "nfc", typ: true },
    ], false),
    "ResponseForFingerprintResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("FingerprintResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "FingerprintResponse": o([
        { json: "fingerprint", js: "fingerprint", typ: "" },
    ], false),
    "ResponseForPasswordLoginResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("PasswordLoginResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "PasswordLoginResponse": o([
        { json: "authenticated", js: "authenticated", typ: true },
        { json: "captcha", js: "captcha", typ: u(undefined, u(r("CAPTCHAResponse"), null)) },
        { json: "forcePasswordReset", js: "forcePasswordReset", typ: true },
        { json: "resetMasterPassword", js: "resetMasterPassword", typ: true },
        { json: "twoFactor", js: "twoFactor", typ: u(undefined, u(r("PasswordLoginResponseTwoFactorProviders"), null)) },
    ], false),
    "CAPTCHAResponse": o([
        { json: "siteKey", js: "siteKey", typ: "" },
    ], false),
    "PasswordLoginResponseTwoFactorProviders": o([
        { json: "authenticator", js: "authenticator", typ: u(undefined, u(r("FluffyAuthenticator"), null)) },
        { json: "duo", js: "duo", typ: u(undefined, u(r("FluffyDuo"), null)) },
        { json: "email", js: "email", typ: u(undefined, u(r("FluffyEmail"), null)) },
        { json: "organizationDuo", js: "organizationDuo", typ: u(undefined, u(r("FluffyDuo"), null)) },
        { json: "remember", js: "remember", typ: u(undefined, u(r("FluffyRemember"), null)) },
        { json: "webAuthn", js: "webAuthn", typ: u(undefined, u(r("FluffyWebAuthn"), null)) },
        { json: "yubiKey", js: "yubiKey", typ: u(undefined, u(r("FluffyYubiKey"), null)) },
    ], false),
    "FluffyAuthenticator": o([], false),
    "FluffyDuo": o([
        { json: "host", js: "host", typ: "" },
        { json: "signature", js: "signature", typ: "" },
    ], false),
    "FluffyEmail": o([
        { json: "email", js: "email", typ: "" },
    ], false),
    "FluffyRemember": o([], false),
    "FluffyWebAuthn": o([], false),
    "FluffyYubiKey": o([
        { json: "nfc", js: "nfc", typ: true },
    ], false),
    "ResponseForProjectResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("ProjectResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "ProjectResponse": o([
        { json: "creationDate", js: "creationDate", typ: Date },
        { json: "id", js: "id", typ: "" },
        { json: "name", js: "name", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
        { json: "revisionDate", js: "revisionDate", typ: Date },
    ], false),
    "ResponseForProjectsDeleteResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("ProjectsDeleteResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "ProjectsDeleteResponse": o([
        { json: "data", js: "data", typ: a(r("ProjectDeleteResponse")) },
    ], false),
    "ProjectDeleteResponse": o([
        { json: "error", js: "error", typ: u(undefined, u(null, "")) },
        { json: "id", js: "id", typ: "" },
    ], false),
    "ResponseForProjectsResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("ProjectsResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "ProjectsResponse": o([
        { json: "data", js: "data", typ: a(r("DatumElement")) },
    ], false),
    "DatumElement": o([
        { json: "creationDate", js: "creationDate", typ: Date },
        { json: "id", js: "id", typ: "" },
        { json: "name", js: "name", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
        { json: "revisionDate", js: "revisionDate", typ: Date },
    ], false),
    "ResponseForSecretIdentifiersResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("SecretIdentifiersResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "SecretIdentifiersResponse": o([
        { json: "data", js: "data", typ: a(r("SecretIdentifierResponse")) },
    ], false),
    "SecretIdentifierResponse": o([
        { json: "id", js: "id", typ: "" },
        { json: "key", js: "key", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
    ], false),
    "ResponseForSecretResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("SecretResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "SecretResponse": o([
        { json: "creationDate", js: "creationDate", typ: Date },
        { json: "id", js: "id", typ: "" },
        { json: "key", js: "key", typ: "" },
        { json: "note", js: "note", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
        { json: "projectId", js: "projectId", typ: u(undefined, u(null, "")) },
        { json: "revisionDate", js: "revisionDate", typ: Date },
        { json: "value", js: "value", typ: "" },
    ], false),
    "ResponseForSecretsDeleteResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("SecretsDeleteResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "SecretsDeleteResponse": o([
        { json: "data", js: "data", typ: a(r("SecretDeleteResponse")) },
    ], false),
    "SecretDeleteResponse": o([
        { json: "error", js: "error", typ: u(undefined, u(null, "")) },
        { json: "id", js: "id", typ: "" },
    ], false),
    "ResponseForSecretsResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("SecretsResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "SecretsResponse": o([
        { json: "data", js: "data", typ: a(r("DatumClass")) },
    ], false),
    "DatumClass": o([
        { json: "creationDate", js: "creationDate", typ: Date },
        { json: "id", js: "id", typ: "" },
        { json: "key", js: "key", typ: "" },
        { json: "note", js: "note", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
        { json: "projectId", js: "projectId", typ: u(undefined, u(null, "")) },
        { json: "revisionDate", js: "revisionDate", typ: Date },
        { json: "value", js: "value", typ: "" },
    ], false),
    "ResponseForSyncResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("SyncResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "SyncResponse": o([
        { json: "ciphers", js: "ciphers", typ: a(r("CipherDetailsResponse")) },
        { json: "profile", js: "profile", typ: r("ProfileResponse") },
    ], false),
    "CipherDetailsResponse": o([], false),
    "ProfileResponse": o([
        { json: "email", js: "email", typ: "" },
        { json: "id", js: "id", typ: "" },
        { json: "name", js: "name", typ: "" },
        { json: "organizations", js: "organizations", typ: a(r("ProfileOrganizationResponse")) },
    ], false),
    "ProfileOrganizationResponse": o([
        { json: "id", js: "id", typ: "" },
    ], false),
    "ResponseForUserAPIKeyResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("UserAPIKeyResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "UserAPIKeyResponse": o([
        { json: "apiKey", js: "apiKey", typ: "" },
    ], false),
    "DeviceType": [
        "Android",
        "AndroidAmazon",
        "ChromeBrowser",
        "ChromeExtension",
        "EdgeBrowser",
        "EdgeExtension",
        "FirefoxBrowser",
        "FirefoxExtension",
        "IEBrowser",
        "iOS",
        "LinuxDesktop",
        "MacOsDesktop",
        "OperaBrowser",
        "OperaExtension",
        "SDK",
        "SafariBrowser",
        "SafariExtension",
        "UWP",
        "UnknownBrowser",
        "VivaldiBrowser",
        "VivaldiExtension",
        "WindowsDesktop",
    ],
    "TwoFactorProvider": [
        "Authenticator",
        "Duo",
        "Email",
        "OrganizationDuo",
        "Remember",
        "U2f",
        "WebAuthn",
        "Yubikey",
    ],
    "LinkedIDType": [
        "Address1",
        "Address2",
        "Address3",
        "Brand",
        "CardholderName",
        "City",
        "Code",
        "Company",
        "Country",
        "Email",
        "ExpMonth",
        "ExpYear",
        "FirstName",
        "FullName",
        "LastName",
        "LicenseNumber",
        "MiddleName",
        "Number",
        "PassportNumber",
        "Password",
        "Phone",
        "PostalCode",
        "Ssn",
        "State",
        "Title",
        "Username",
    ],
    "FieldType": [
        "Boolean",
        "Hidden",
        "Linked",
        "Text",
    ],
    "URIMatchType": [
        "domain",
        "exact",
        "host",
        "never",
        "regularExpression",
        "startsWith",
    ],
    "CipherRepromptType": [
        "None",
        "Password",
    ],
    "SecureNoteType": [
        "Generic",
    ],
    "CipherType": [
        "Card",
        "Identity",
        "Login",
        "SecureNote",
    ],
    "ExportFormatEnum": [
        "AccountEncryptedJson",
        "Csv",
        "Json",
    ],
    "SendType": [
        "File",
        "Text",
    ],
};
